sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
sudo apt-get update
sudo apt-get install -y mongodb-org
mongo -version
sudo service mongod start
sudo service mongod stop
sudo service mongod restart
sudo cat /var/log/mongodb/mongod.log
sige@sige1:~$ sudo  mongod   #服务器端
sige@sige1:~$ sudo wget https://download.robomongo.org/0.9.0/linux/robomongo-0.9.0-linux-x86_64-0786489.tar.gz
sige@sige1:~$ sudo mongo     #客户端
> db
test
> show dbs
admin  0.078GB
local  0.078GB
> use py3
switched to db py3
> show dbs
admin  0.078GB
local  0.078GB
> db.createCollection('stu')
{ "ok" : 1 }
> show collections
stu
system.indexes
> db.stu.drop()
true
> show collections
system.indexes
> db.stu.insert({name:'gj',gender:true})
WriteResult({ "nInserted" : 1 })
> show collections
stu
system.indexes
> db.stu.find()
{ "_id" : ObjectId("5c6e0aaf948ad277862b3c20"), "name" : "gj", "gender" : true }
> db.stu.insert({name:'hr',age:18})
WriteResult({ "nInserted" : 1 })
> db.stu.find()
{ "_id" : ObjectId("5c6e0aaf948ad277862b3c20"), "name" : "gj", "gender" : true }
{ "_id" : ObjectId("5c6e0b53948ad277862b3c21"), "name" : "hr", "age" : 18 }
> db.stu.update({},{name:'gj1'})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.stu.find()
{ "_id" : ObjectId("5c6e0aaf948ad277862b3c20"), "name" : "gj1" }
{ "_id" : ObjectId("5c6e0b53948ad277862b3c21"), "name" : "hr", "age" : 18 }
> db.stu.drop()
true
> db.stu.insert({name:'gj',gender:true})
WriteResult({ "nInserted" : 1 })
> db.stu.find()
{ "_id" : ObjectId("5c6e0cdc948ad277862b3c22"), "name" : "gj", "gender" : true }
> db.stu.update({},{$set:{name:'gj1'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.stu.find()
{ "_id" : ObjectId("5c6e0cdc948ad277862b3c22"), "name" : "gj1", "gender" : true }
> db.stu.remove({})  #删除所有
WriteResult({ "nRemoved" : 1 })
> db.stu.find()

> db.createCollection('sub',{capped:true,size:10})
{ "ok" : 1 }
> db.sub.insert({title:'python',count:10})
WriteResult({ "nInserted" : 1 })
> db.sub.insert({title:'linux',count:15})
WriteResult({ "nInserted" : 1 })
> db.sub.insert({title:'sql',count:4})
WriteResult({ "nInserted" : 1 })
> db.sub.insert({title:'mongodb',count:2})
WriteResult({ "nInserted" : 1 })
> db.stu.find()
> db.sub.find() = db.getCollection('sub').find({})#这个是在robomongo数据库图形界面直接点击Collections-sub
{ "_id" : ObjectId("5c6e124c948ad277862b3c23"), "title" : "python", "count" : 10 }
{ "_id" : ObjectId("5c6e1255948ad277862b3c24"), "title" : "linux", "count" : 15 }
{ "_id" : ObjectId("5c6e125e948ad277862b3c25"), "title" : "sql", "count" : 4 }
{ "_id" : ObjectId("5c6e126d948ad277862b3c26"), "title" : "mongodb", "count" : 2 }
>db.sub.insert({title:'html',count:1})
>db.sub.insert({title:'css',count:3})
>db.sub.insert({title:'javascript',count:3})
>db.sub.find()
>db.sub.findOne()
>db.sub.find().pretty()
> db.sub.find({title:'mongodb'}) #查询title等于mongodb的
{ "_id" : ObjectId("5c6e126d948ad277862b3c26"), "title" : "mongodb", "count" : 2 }
> db.sub.find({title:'html'})
{ "_id" : ObjectId("5c6e3439f1cb48b5d16fea64"), "title" : "html", "count" : 1 }
> db.sub.find({count:{$gt:2}}) #查询count值大于2的
> db.sub.find({title:'css',count:{$gt:2}}) #查询title等于css 并且 count大于2的,逻辑运算符并且
{ "_id" : ObjectId("5c6e34caf1cb48b5d16fea65"), "title" : "css", "count" : 3 }
> db.sub.find({$or:[{title:'css'},{count:{$gt:2}}]}) #查询title课程是css或者count大于2的，逻辑运算符或者
> db.sub.find({count:{$in:[1,3]}}) #查询课时在1到3天的
{ "_id" : ObjectId("5c6e3439f1cb48b5d16fea64"), "title" : "html", "count" : 1 }
{ "_id" : ObjectId("5c6e34caf1cb48b5d16fea65"), "title" : "css", "count" : 3 }
{ "_id" : ObjectId("5c6e3514f1cb48b5d16fea66"), "title" : "javascript", "count" : 3 }
> db.sub.find({count:{$nin:[1,3]}}) #查询课时不在1到3天的
{ "_id" : ObjectId("5c6e124c948ad277862b3c23"), "title" : "python", "count" : 10 }
{ "_id" : ObjectId("5c6e1255948ad277862b3c24"), "title" : "linux", "count" : 15 }
{ "_id" : ObjectId("5c6e125e948ad277862b3c25"), "title" : "sql", "count" : 4 }
{ "_id" : ObjectId("5c6e126d948ad277862b3c26"), "title" : "mongodb", "count" : 2 }
> db.stu.remove({})
WriteResult({ "nRemoved" : 2 })
> db.stu.find()
> use py3
switched to db py3
> db.stu.insert({name:'gj',age:18})
WriteResult({ "nInserted" : 1 })
> db.stu.insert({name:'gxj',age:28})
WriteResult({ "nInserted" : 1 })
> db.getCollection('stu').find({})
{ "_id" : ObjectId("5c6e48c8948ad277862b3c29"), "name" : "gj", "age" : 18 }
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj", "age" : 28 }
> db.stu.find({name:/^g/})  #正则表达式
{ "_id" : ObjectId("5c6e48c8948ad277862b3c29"), "name" : "gj", "age" : 18 }
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj", "age" : 28 }
> db.stu.find({$where:function(){return this.age>20}}) #自定义匿名函数查询
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj", "age" : 28 }
> db.stu.find({$where:function(){return this.name.indexOf('g')==0}}) #用js函数indexOf
{ "_id" : ObjectId("5c6e48c8948ad277862b3c29"), "name" : "gj", "age" : 18 }
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj", "age" : 28 }
> db.stu.find({$where:function(){return this.name.indexOf('x')>=0}})
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj", "age" : 28 }
> db.stu.find()
{ "_id" : ObjectId("5c6e48c8948ad277862b3c29"), "name" : "gj", "age" : 18 }
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj", "age" : 28 }
> db.stu.find().limit(1)#查1个
{ "_id" : ObjectId("5c6e48c8948ad277862b3c29"), "name" : "gj", "age" : 18 }
> db.stu.find().limit(1).skip(1) #查跳过去1个
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj", "age" : 28 }
> db.stu.find().skip(1).limit(1) #limit和skip位置不分前后
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj", "age" : 28 }
> db.stu.find({},{name:1})  #投影筛选
{ "_id" : ObjectId("5c6e48c8948ad277862b3c29"), "name" : "gj" }
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj" }
> db.stu.find({},{name:1,_id:0})#投影筛选,只查自己需要的字段
{ "name" : "gj" }
{ "name" : "gxj" }
> db.stu.find().sort({age:-1}) #-1由大到小排序
{ "_id" : ObjectId("5c6e48cc948ad277862b3c2a"), "name" : "gxj", "age" : 28 }
{ "_id" : ObjectId("5c6e48c8948ad277862b3c29"), "name" : "gj", "age" : 18 }
> db.stu.count({age:{$gt:20}}) #count统计个数
1
> db.stu.remove({})
WriteResult({ "nRemoved" : 2 })
>
> db.stu.insert({name:'gj',gender:true,age:18})
WriteResult({ "nInserted" : 1 })
> db.stu.insert({name:'gj1',gender:true,age:28})
WriteResult({ "nInserted" : 1 })
> db.stu.insert({name:'hr',gender:false,age:18})
WriteResult({ "nInserted" : 1 })
> db.stu.insert({name:'hr1',gender:false,age:28})
WriteResult({ "nInserted" : 1 })
> db.stu.find()
{ "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"), "name" : "gj", "gender" : true, "age" : 18 }
{ "_id" : ObjectId("5c6e4ec2948ad277862b3c2c"), "name" : "gj1", "gender" : true, "age" : 28 }
{ "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"), "name" : "hr", "gender" : false, "age" : 18 }
{ "_id" : ObjectId("5c6e4ede948ad277862b3c2e"), "name" : "hr1", "gender" : false, "age" : 28 }
> db.stu.distinct('gender',{age:{$gt:20}}) #去重，查找年龄大于20的
[ true, false ]
> db.stu.aggregate([                #聚合
... {$group:{_id:'$gender',counter:{$sum:1}}}
... ])
{ "_id" : false, "counter" : 2 }
{ "_id" : true, "counter" : 2 }
> db.stu.aggregate([ {$group:{_id:'$gender',counter:{$sum:'$age'}}} ])#管道
{ "_id" : false, "counter" : 46 }
{ "_id" : true, "counter" : 46 }
> db.stu.aggregate([ {$group:{_id:'$gender',counter:{$avg:'$age'}}} ])
{ "_id" : false, "counter" : 23 }
{ "_id" : true, "counter" : 23 }
> db.stu.aggregate([ {$group:{_id:'$gender',counter:{$first:'$age'}}} ])
{ "_id" : false, "counter" : 18 }
{ "_id" : true, "counter" : 18 }
> db.stu.aggregate([ {$group:{_id:'$gender',counter:{$last:'$age'}}} ])
{ "_id" : false, "counter" : 28 }
{ "_id" : true, "counter" : 28 }
> db.stu.aggregate([ {$group:{_id:'$gender',counter:{$push:'$age'}}} ])
{ "_id" : false, "counter" : [ 18, 28 ] }
{ "_id" : true, "counter" : [ 18, 28 ] }
> db.stu.aggregate([ {$group:{_id:'$gender',counter:{$push:'$$ROOT'}}} ]) #基于整个文档给你分组
{ "_id" : false, "counter" : [ { "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"), "name" : "hr", "gender" : false, "age" : 18 }, { "_id" : ObjectId("5c6e4ede948ad277862b3c2e"), "name" : "hr1", "gender" : false, "age" : 28 } ] }
{ "_id" : true, "counter" : [ { "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"), "name" : "gj", "gender" : true, "age" : 18 }, { "_id" : ObjectId("5c6e4ec2948ad277862b3c2c"), "name" : "gj1", "gender" : true, "age" : 28 } ] }
###################在ubuntu16.04 LTS里装了vnc，然后windows10里装vnc viewer连robomongo就可以##########
db.stu.aggregate([
   {$match:{age:{$gt:20}}}
])

db.stu.aggregate([
   {$match:{age:{$gt:20}}},   #过滤,把过滤的结果给$group管道
   {$group:{                  #管道
       _id:'$gender',
       counter:{$sum:1}
       }}
])

db.stu.aggregate([
   {$match:{age:{$gt:20}}},
   {$group:{
       _id:'$gender',
       counter:{$sum:1}
       }},
       {$project:{_id:0,counter:1}}   #投影
])

db.stu.aggregate([
   {$match:{age:{$gt:20}}},
   {$group:{
       _id:'$gender',
       counter:{$sum:1}
       }},
       {$project:{_id:1,counter:1}},
       {$sort:{_id:-1}}
])

db.stu.aggregate([
   {$match:{age:{$gt:20}}},
   {$group:{
       _id:'$gender',
       counter:{$sum:1}
       }},
       {$project:{_id:1,counter:1}},
       {$sort:{_id:-1}},
       {$skip:1},      #$skip和$limit顺序有区别
       {$limit:1}
])

db.t2.insert({_id:1,title:'t-shirt',size:['M','L','S']})
db.t2.aggregate([            #unwind
  {$unwind:'$size'}
])
#######结果#########
/* 1 */
{
    "_id" : 1.0,
    "title" : "t-shirt",
    "size" : "M"
}

/* 2 */
{
    "_id" : 1.0,
    "title" : "t-shirt",
    "size" : "L"
}

/* 3 */
{
    "_id" : 1.0,
    "title" : "t-shirt",
    "size" : "S"
}
db.t2.insert({_id:2,title:'t2',size:{}})
db.t2.insert({_id:3,title:'t3'})
db.t2.insert({_id:4,title:'t4',size:null})
db.t2.insert({_id:5,title:'t5',size:'M'})
db.t2.find()

db.t2.aggregate([
    {$unwind:{path:'$size',preserveNullAndEmptyArrays:true}}
])

db.stu.aggregate([
    {$group:{_id:'$gender',counter:{$sum:1},docs:{$push:'$$ROOT'}}},
])

db.stu.aggregate([
    {$group:{_id:'$gender',counter:{$sum:1},docs:{$push:'$$ROOT'}}},
    {$project:{_id:0,counter:1,docs:1}},
    {$unwind:'$docs'},
])
#################
* 1 */
{
    "counter" : 2.0,
    "docs" : {
        "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"),
        "name" : "hr",
        "gender" : false,
        "age" : 18.0
    }
}

/* 2 */
{
    "counter" : 2.0,
    "docs" : {
        "_id" : ObjectId("5c6e4ede948ad277862b3c2e"),
        "name" : "hr1",
        "gender" : false,
        "age" : 28.0
    }
}

/* 3 */
{
    "counter" : 2.0,
    "docs" : {
        "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"),
        "name" : "gj",
        "gender" : true,
        "age" : 18.0
    }
> show  collections
stu
sub
system.indexes
t2
> for(i=0;i<100000;i++){db.t1.insert({name:'test'+i,age:i})}
WriteResult({ "nInserted" : 1 })
> db.t1.find({name:'test100000'})
> db.t1.find({name:'test100000'}).explain('executionStats')
> db.t1.ensureIndex({name:1})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> db.t1.find({name:'test100000'}).explain('executionStats')
> db.t1.getIndexes() #查看所有的索引
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "py3.t1"
	},
	{
		"v" : 2,
		"key" : {
			"name" : 1
		},
		"name" : "name_1",
		"ns" : "py3.t1"
	}
]
> db.createUser({user:'admin',pwd:'123',roles:[{role:'root',db:'admin'}]})
Successfully added user: {
	"user" : "admin",
	"roles" : [
		{
			"role" : "root",
			"db" : "admin"
		}
	]
}
sige@sige1:~/iso$ sudo cat  /etc/mongod.conf | grep  security
security:
   authorization: enabled    #空格enabled
sige@sige1:~/iso$ sudo  service  mongod restart
sige@sige1:~/iso$ sudo mongo
sige@sige1:~/iso$ sudo mongo
MongoDB shell version v3.4.19
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.19
> db
test
> show  dbs
2019-02-25T15:26:52.371+0800 E QUERY    [thread1] Error: listDatabases failed:{
	"ok" : 0,
	"errmsg" : "not authorized on admin to execute command { listDatabases: 1.0 }",
	"code" : 13,
	"codeName" : "Unauthorized"
} :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
Mongo.prototype.getDBs@src/mongo/shell/mongo.js:62:1
shellHelper.show@src/mongo/shell/utils.js:814:19
shellHelper@src/mongo/shell/utils.js:704:15
@(shellhelp2):1:1
sige@sige1:~/iso$ sudo mongo  -u admin -p 123  --authenticationDatabase  admin
MongoDB shell version v3.4.19
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.19
Server has startup warnings:
2019-02-25T15:26:34.578+0800 I CONTROL  [initandlisten]
2019-02-25T15:26:34.578+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'.
2019-02-25T15:26:34.578+0800 I CONTROL  [initandlisten] **        We suggest setting it to 'never'
2019-02-25T15:26:34.578+0800 I CONTROL  [initandlisten]
> db
test
> use admin
switched to db admin
> db
admin
> show collections
system.indexes
system.users
system.version
> db.system.users.find()
{ "_id" : "admin.admin", "user" : "admin", "db" : "admin", "credentials" : { "SCRAM-SHA-1" : { "iterationCount" : 10000, "salt" : "K/a+kmHMNK1YhYI5sc5KTQ==", "storedKey" : "qkJoOuMe+Xl3vMr0Zk9c0Ojtpa8=", "serverKey" : "xeU0ReGp8im0et9l9dFhMPpbBs4=" } }, "roles" : [ { "role" : "root", "db" : "admin" } ] }
> show  users
{
	"_id" : "admin.admin",
	"user" : "admin",
	"db" : "admin",
	"roles" : [
		{
			"role" : "root",
			"db" : "admin"
		}
	]
}
> use py3
switched to db py3
> show collections
stu
sub
system.indexes
t1
t2
> db.stu.find()
{ "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"), "name" : "gj", "gender" : true, "age" : 18 }
{ "_id" : ObjectId("5c6e4ec2948ad277862b3c2c"), "name" : "gj1", "gender" : true, "age" : 28 }
{ "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"), "name" : "hr", "gender" : false, "age" : 18 }
{ "_id" : ObjectId("5c6e4ede948ad277862b3c2e"), "name" : "hr1", "gender" : false, "age" : 28 }
> db.createUser({user:'py3',pwd:'123',roles:[{role:'readWrite',db:'py3'}]})
Successfully added user: {
	"user" : "py3",
	"roles" : [
		{
			"role" : "readWrite",
			"db" : "py3"
		}
	]
}
> ctrl+d
bye
sige@sige1:~/iso$ sudo mongo -u py3 -p 123 --authenticationDatabase  py3
[sudo] password for sige:
MongoDB shell version v3.4.19
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.19
>
> db
test
> show dbs
2019-02-25T16:18:07.808+0800 E QUERY    [thread1] Error: listDatabases failed:{
	"ok" : 0,
	"errmsg" : "not authorized on admin to execute command { listDatabases: 1.0 }",
	"code" : 13,
	"codeName" : "Unauthorized"
} :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
Mongo.prototype.getDBs@src/mongo/shell/mongo.js:62:1
shellHelper.show@src/mongo/shell/utils.js:814:19
shellHelper@src/mongo/shell/utils.js:704:15
@(shellhelp2):1:1
>
bye
sige@sige1:~/iso$ sudo mongo -u py3 -p 123 --authenticationDatabase  admin
MongoDB shell version v3.4.19
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.19
2019-02-25T16:18:30.179+0800 E QUERY    [thread1] Error: Authentication failed. :
DB.prototype._authOrThrow@src/mongo/shell/db.js:1461:20
@(auth):6:1
@(auth):1:2
exception: login failed
sige@sige1:~/iso$ sudo mongo -u py3 -p 123 --authenticationDatabase  py3
MongoDB shell version v3.4.19
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.19
> use admin
switched to db admin
> show collections
2019-02-25T16:19:02.445+0800 E QUERY    [thread1] Error: listCollections failed: {
	"ok" : 0,
	"errmsg" : "not authorized on admin to execute command { listCollections: 1.0, filter: {} }",
	"code" : 13,
	"codeName" : "Unauthorized"
} :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
DB.prototype._getCollectionInfosCommand@src/mongo/shell/db.js:807:1
DB.prototype.getCollectionInfos@src/mongo/shell/db.js:819:19
DB.prototype.getCollectionNames@src/mongo/shell/db.js:830:16
shellHelper.show@src/mongo/shell/utils.js:807:9
shellHelper@src/mongo/shell/utils.js:704:15
@(shellhelp2):1:1
> db.user.find()
Error: error: {
	"ok" : 0,
	"errmsg" : "not authorized on admin to execute command { find: \"user\", filter: {} }",
	"code" : 13,
	"codeName" : "Unauthorized"
}
> use  py3
switched to db py3
> show collections
stu
sub
system.indexes
t1
t2
> db.stu.find()
{ "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"), "name" : "gj", "gender" : true, "age" : 18 }
{ "_id" : ObjectId("5c6e4ec2948ad277862b3c2c"), "name" : "gj1", "gender" : true, "age" : 28 }
{ "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"), "name" : "hr", "gender" : false, "age" : 18 }
{ "_id" : ObjectId("5c6e4ede948ad277862b3c2e"), "name" : "hr1", "gender" : false, "age" : 28 }
>
cd  ~/Desktop
mkdir t1
mkdir t2
sige@sige1:~$  mongod --bind_ip 10.239.177.104  --port 27018 --dbpath ~/Desktop/t1 --replSet rs0
sige@sige1:~$  mongod --bind_ip 10.239.177.104  --port 27019 --dbpath ~/Desktop/t2 --replSet rs0
sige@sige1:~$ mongo  --help
sige@sige1:~$ sudo mongo --host 10.239.177.104  --port 27018
[sudo] password for sige:
MongoDB shell version v3.4.19
connecting to: mongodb://10.239.177.104:27018/
MongoDB server version: 3.4.19
Server has startup warnings:
2019-02-25T16:50:22.250+0800 I STORAGE  [initandlisten]
2019-02-25T16:50:22.250+0800 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is ste engine
2019-02-25T16:50:22.250+0800 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/
2019-02-25T16:50:22.704+0800 I CONTROL  [initandlisten]
2019-02-25T16:50:22.704+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled
2019-02-25T16:50:22.704+0800 I CONTROL  [initandlisten] **          Read and write access to data
2019-02-25T16:50:22.704+0800 I CONTROL  [initandlisten]
2019-02-25T16:50:22.704+0800 I CONTROL  [initandlisten]
2019-02-25T16:50:22.704+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hug
2019-02-25T16:50:22.704+0800 I CONTROL  [initandlisten] **        We suggest setting it to 'never'
2019-02-25T16:50:22.704+0800 I CONTROL  [initandlisten]
> db
> show dbs
> rs.initiate()  #主
{
	"info2" : "no configuration specified. Using a default configuration for the set",
	"me" : "10.239.177.104:27018",
	"ok" : 1
}
rs0:OTHER> rs.status()
{
	"set" : "rs0",
	"date" : ISODate("2019-02-25T09:04:19.692Z"),
	"myState" : 1,
	"term" : NumberLong(1),
	"syncingTo" : "",
	"syncSourceHost" : "",
	"syncSourceId" : -1,
	"heartbeatIntervalMillis" : NumberLong(2000),
	"optimes" : {
		"lastCommittedOpTime" : {
			"ts" : Timestamp(1551085450, 1),
			"t" : NumberLong(1)
		},
		"appliedOpTime" : {
			"ts" : Timestamp(1551085450, 1),
			"t" : NumberLong(1)
		},
		"durableOpTime" : {
			"ts" : Timestamp(1551085450, 1),
			"t" : NumberLong(1)
		}
	},
	"members" : [
		{
			"_id" : 0,
			"name" : "10.239.177.104:27018",
			"health" : 1,
			"state" : 1,
			"stateStr" : "PRIMARY",
			"uptime" : 837,
			"optime" : {
				"ts" : Timestamp(1551085450, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2019-02-25T09:04:10Z"),
			"syncingTo" : "",
			"syncSourceHost" : "",
			"syncSourceId" : -1,
			"infoMessage" : "could not find member to sync from",
			"electionTime" : Timestamp(1551085388, 2),
			"electionDate" : ISODate("2019-02-25T09:03:08Z"),
			"configVersion" : 1,
			"self" : true,
			"lastHeartbeatMessage" : ""
		}
	],
	"ok" : 1
}
rs0:PRIMARY> rs.add('10.239.177.104:27019')
{ "ok" : 1 }
rs0:PRIMARY> rs.status()
{
	"set" : "rs0",
	"date" : ISODate("2019-02-25T09:06:20.158Z"),
	"myState" : 1,
	"term" : NumberLong(1),
	"syncingTo" : "",
	"syncSourceHost" : "",
	"syncSourceId" : -1,
	"heartbeatIntervalMillis" : NumberLong(2000),
	"optimes" : {
		"lastCommittedOpTime" : {
			"ts" : Timestamp(1551085565, 1),
			"t" : NumberLong(1)
		},
		"appliedOpTime" : {
			"ts" : Timestamp(1551085565, 1),
			"t" : NumberLong(1)
		},
		"durableOpTime" : {
			"ts" : Timestamp(1551085565, 1),
			"t" : NumberLong(1)
		}
	},
	"members" : [
		{
			"_id" : 0,
			"name" : "10.239.177.104:27018",
			"health" : 1,
			"state" : 1,
			"stateStr" : "PRIMARY",
			"uptime" : 958,
			"optime" : {
				"ts" : Timestamp(1551085565, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2019-02-25T09:06:05Z"),
			"syncingTo" : "",
			"syncSourceHost" : "",
			"syncSourceId" : -1,
			"infoMessage" : "",
			"electionTime" : Timestamp(1551085388, 2),
			"electionDate" : ISODate("2019-02-25T09:03:08Z"),
			"configVersion" : 2,
			"self" : true,
			"lastHeartbeatMessage" : ""
		},
		{
			"_id" : 1,
			"name" : "10.239.177.104:27019",
			"health" : 1,
			"state" : 2,
			"stateStr" : "SECONDARY",
			"uptime" : 14,
			"optime" : {
				"ts" : Timestamp(1551085565, 1),
				"t" : NumberLong(1)
			},
			"optimeDurable" : {
				"ts" : Timestamp(1551085565, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2019-02-25T09:06:05Z"),
			"optimeDurableDate" : ISODate("2019-02-25T09:06:05Z"),
			"lastHeartbeat" : ISODate("2019-02-25T09:06:19.652Z"),
			"lastHeartbeatRecv" : ISODate("2019-02-25T09:06:16.123Z"),
			"pingMs" : NumberLong(0),
			"lastHeartbeatMessage" : "",
			"syncingTo" : "",
			"syncSourceHost" : "",
			"syncSourceId" : -1,
			"infoMessage" : "",
			"configVersion" : 2
		}
	],
	"ok" : 1
}
rs0:PRIMARY> use py3
switched to db py3
rs0:PRIMARY> db.stu.insert({name:'郭靖'})
WriteResult({ "nInserted" : 1 })
rs0:PRIMARY> db.stu.find()
{ "_id" : ObjectId("5c73b0f1145e344233f2ab08"), "name" : "郭靖" }



sige@sige1:~$ sudo mongo --host 10.239.177.104  --port 27019
[sudo] password for sige:
MongoDB shell version v3.4.19
connecting to: mongodb://10.239.177.104:27019/
MongoDB server version: 3.4.19
Server has startup warnings:
2019-02-25T16:55:38.542+0800 I STORAGE  [initandlisten]
2019-02-25T16:55:38.542+0800 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
2019-02-25T16:55:38.542+0800 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem
2019-02-25T16:55:38.738+0800 I CONTROL  [initandlisten]
2019-02-25T16:55:38.738+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2019-02-25T16:55:38.738+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2019-02-25T16:55:38.738+0800 I CONTROL  [initandlisten]
2019-02-25T16:55:38.738+0800 I CONTROL  [initandlisten]
2019-02-25T16:55:38.738+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'.
2019-02-25T16:55:38.738+0800 I CONTROL  [initandlisten] **        We suggest setting it to 'never'
2019-02-25T16:55:38.738+0800 I CONTROL  [initandlisten]
>回车
rs0:SECONDARY>
rs0:SECONDARY> use py3
switched to db py3
rs0:SECONDARY> db.stu.find()
Error: error: {
	"ok" : 0,
	"errmsg" : "not master and slaveOk=false",
	"code" : 13435,
	"codeName" : "NotMasterNoSlaveOk"
}
rs0:SECONDARY> rs.slaveOk()
rs0:SECONDARY> use py3
switched to db py3
rs0:SECONDARY> db.stu.find()
{ "_id" : ObjectId("5c73b0f1145e344233f2ab08"), "name" : "郭靖" }
####################################################################
sige@sige1:~$ mongod --bind_ip 10.239.177.104  --port 27018 --dbpath ~/Desktop/t1 --replSet rs0 #ctrl+c取消
sige@sige1:~$ sudo mongo --host 10.239.177.104  --port 27019
rs0:PRIMARY> use py3
switched to db py3
rs0:PRIMARY> db.stu.find()
{ "_id" : ObjectId("5c73b0f1145e344233f2ab08"), "name" : "郭靖" }
rs0:PRIMARY> db.stu.insert({name:'黄蓉'})
WriteResult({ "nInserted" : 1 })
rs0:PRIMARY> db.stu.find()
{ "_id" : ObjectId("5c73b0f1145e344233f2ab08"), "name" : "郭靖" }
{ "_id" : ObjectId("5c73b21e4256e5e0f1fad326"), "name" : "黄蓉" }

sige@sige1:~$ sudo mongo --host 10.239.177.104  --port 27018
rs0:SECONDARY> db.stu.find()                         #主变从了
Error: error: {
	"ok" : 0,
	"errmsg" : "not master and slaveOk=false",
	"code" : 13435,
	"codeName" : "NotMasterNoSlaveOk"
}
rs0:SECONDARY> rs.slaveOk()   #要申明一下
rs0:SECONDARY> db.stu.find()
rs0:SECONDARY> use py3
switched to db py3
rs0:SECONDARY> db.stu.find()
{ "_id" : ObjectId("5c73b0f1145e344233f2ab08"), "name" : "郭靖" }
{ "_id" : ObjectId("5c73b21e4256e5e0f1fad326"), "name" : "黄蓉" }
sige@sige1:~/Desktop$ rm -rf  t1
sige@sige1:~/Desktop$ rm -rf  t2
sige@sige1:~/Desktop$ mkdir bak
sige@sige1:~/Desktop$ ps ajx| grep  mongod
    1  1748  1748  1748 ?           -1 SLsl   123   0:29 /usr/bin/mongod --config /etc/mongod.conf
 2473  2676  2676  2473 pts/6     2676 Sl+   1000   0:09 mongod --bind_ip 10.239.177.104 --port 27019 --dbpath /home/sige/Desktop/t2 --replSet rs0
 1756  3000  3000  1756 pts/9     3000 Sl+   1000   0:03 mongod --bind_ip 10.239.177.104 --port 27018 --dbpath /home/sige/Desktop/t1 --replSet rs0
 1673  3131  3130  1673 pts/8     3130 S+    1000   0:00 grep --color=auto mongod
 sige@sige1:~/Desktop$ sudo mongo -u admin -p 123 --authenticationDatabase  admin
[sudo] password for sige:
MongoDB shell version v3.4.19
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.19
Server has startup warnings:
2019-02-25T15:26:34.578+0800 I CONTROL  [initandlisten]
2019-02-25T15:26:34.578+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'.
2019-02-25T15:26:34.578+0800 I CONTROL  [initandlisten] **        We suggest setting it to 'never'
2019-02-25T15:26:34.578+0800 I CONTROL  [initandlisten]
> use admin
switched to db admin
> show collections
system.indexes
system.users
system.version
> db.system.users.find()
{ "_id" : "admin.admin", "user" : "admin", "db" : "admin", "credentials" : { "SCRAM-SHA-1" : { "iterationCount" : 10000, "salt" : "K/a+kmHMNK1YhYI5sc5KTQ==", "storedKey" : "qkJoOuMe+Xl3vMr0Zk9c0Ojtpa8=", "serverKey" : "xeU0ReGp8im0et9l9dFhMPpbBs4=" } }, "roles" : [ { "role" : "root", "db" : "admin" } ] }
{ "_id" : "py3.py3", "user" : "py3", "db" : "py3", "credentials" : { "SCRAM-SHA-1" : { "iterationCount" : 10000, "salt" : "5awH7yeYTsbGOQDAN/E5Vw==", "storedKey" : "aW0PusuBZUR9vmQSiT1FLQmVbYE=", "serverKey" : "zk8t7JuT73Vv4Wpqn4U8QNEdrU0=" } }, "roles" : [ { "role" : "readWrite", "db" : "py3" } ] }
>
bye
sige@sige1:~/Desktop$ mongodump -u py3  -p 123 --authenticationDatabase  py3 -d py3  -o bak
2019-02-25T17:26:09.124+0800	writing py3.t1 to
2019-02-25T17:26:09.124+0800	writing py3.sub to
2019-02-25T17:26:09.124+0800	writing py3.t2 to
2019-02-25T17:26:09.124+0800	writing py3.stu to
2019-02-25T17:26:09.125+0800	done dumping py3.sub (7 documents)
2019-02-25T17:26:09.131+0800	done dumping py3.t2 (5 documents)
2019-02-25T17:26:09.131+0800	done dumping py3.stu (4 documents)
2019-02-25T17:26:09.257+0800	done dumping py3.t1 (100000 documents)
sige@sige1:~/Desktop$ mongorestore  -u admin  -p 123  --authenticationDatabase admin  -d py31 --dir  bak/py3
sige@sige1:~/Desktop$ sudo mongo -u admin  -p 123  --authenticationDatabase admin
[sudo] password for sige:intel.123
> show dbs
admin  0.078GB
local  0.078GB
py3    0.078GB
py31   0.078GB
> use py31
switched to db py31
> show collections
stu
sub
system.indexes
t1
t2
> db.stu.find()
{ "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"), "name" : "gj", "gender" : true, "age" : 18 }
{ "_id" : ObjectId("5c6e4ec2948ad277862b3c2c"), "name" : "gj1", "gender" : true, "age" : 28 }
{ "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"), "name" : "hr", "gender" : false, "age" : 18 }
{ "_id" : ObjectId("5c6e4ede948ad277862b3c2e"), "name" : "hr1", "gender" : false, "age" : 28 }
##########mongo和python交互###############
sige@sige1:~$ sudo mongo  -u py3  -p 123  --authenticationDatabase py3
MongoDB shell version v3.4.19
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.4.19
> use py3
switched to db py3
> db.stu.find()
{ "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"), "name" : "gj", "gender" : true, "age" : 18 }
{ "_id" : ObjectId("5c6e4ec2948ad277862b3c2c"), "name" : "gj1", "gender" : true, "age" : 28 }
{ "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"), "name" : "hr", "gender" : false, "age" : 18 }
{ "_id" : ObjectId("5c6e4ede948ad277862b3c2e"), "name" : "hr1", "gender" : false, "age" : 28 }
> db.stu.find()  #增加
{ "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"), "name" : "gj", "gender" : true, "age" : 18 }
{ "_id" : ObjectId("5c6e4ec2948ad277862b3c2c"), "name" : "gj1", "gender" : true, "age" : 28 }
{ "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"), "name" : "hr", "gender" : false, "age" : 18 }
{ "_id" : ObjectId("5c6e4ede948ad277862b3c2e"), "name" : "hr1", "gender" : false, "age" : 28 }
{ "_id" : ObjectId("5c74b1f43db9c328dc7a0f98"), "name" : "张三丰" }
> db.stu.find()  #修改
{ "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"), "name" : "gj", "gender" : true, "age" : 18 }
{ "_id" : ObjectId("5c6e4ec2948ad277862b3c2c"), "name" : "gj1", "gender" : true, "age" : 28 }
{ "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"), "name" : "hr", "gender" : false, "age" : 18 }
{ "_id" : ObjectId("5c6e4ede948ad277862b3c2e"), "name" : "hr1", "gender" : false, "age" : 28 }
{ "_id" : ObjectId("5c74b1f43db9c328dc7a0f98"), "name" : "abc" }
> db.stu.find()  #删除
{ "_id" : ObjectId("5c6e4eb9948ad277862b3c2b"), "name" : "gj", "gender" : true, "age" : 18 }
{ "_id" : ObjectId("5c6e4ec2948ad277862b3c2c"), "name" : "gj1", "gender" : true, "age" : 28 }
{ "_id" : ObjectId("5c6e4ed5948ad277862b3c2d"), "name" : "hr", "gender" : false, "age" : 18 }
{ "_id" : ObjectId("5c6e4ede948ad277862b3c2e"), "name" : "hr1", "gender" : false, "age" : 28 }









