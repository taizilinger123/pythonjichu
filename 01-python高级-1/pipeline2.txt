pipeline {
    agent any
    parameters {
        string(name: 'REPO_URL', defaultValue: 'http://your-default-repo.git', description: 'Git 仓库地址')
        string(name: 'BRANCH', defaultValue: 'main', description: '构建的分支')
        string(name: 'BUILD_COMMAND', defaultValue: 'gcc opr.c -o main', description: '编译命令')
        string(name: 'RUN_COMMAND', defaultValue: './main', description: '执行命令')
    }
    environment {
        GIT_CREDENTIALS = credentials('gitea-credentials-id')
    }
    triggers {
        // 根据需要调整触发器
    }
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }
        stage('Clone') {
            steps {
                git url: "${params.REPO_URL}", branch: "${params.BRANCH}", credentialsId: 'gitea-credentials-id'
            }
        }
        stage('Build') {
            steps {
                sh "${params.BUILD_COMMAND}"
            }
        }
        stage('Test') {
            steps {
                sh "${params.RUN_COMMAND}"
            }
        }
        stage('Commit and Push Changes') {
            steps {
                script {
                    def filesModified = sh(returnStdout: true, script: "git status --porcelain").trim()
                    if (filesModified) {
                        withCredentials([usernamePassword(credentialsId: 'gitea-credentials-id', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                            def encodedUsername = URLEncoder.encode(GIT_USERNAME, "UTF-8")
                            def encodedPassword = URLEncoder.encode(GIT_PASSWORD, "UTF-8")

                            sh 'git config user.email "your.email@example.com"'
                            sh 'git config user.name "your-username"'

                            sh "git add ."
                            sh "git commit -m 'Automated changes from Jenkins build #${env.BUILD_NUMBER} [ci skip]'"

                            try {
                                sh "git pull origin ${params.BRANCH} --rebase"
                            } catch (Exception e) {
                                echo "Merge conflict detected. Please resolve conflicts manually."
                                error "Merge conflict detected."
                            }

                            // 提取仓库的主机名和路径
                            def repoHostPath = params.REPO_URL.replaceFirst(/https?:\/\//, '')
                            sh "git push http://${encodedUsername}:${encodedPassword}@${repoHostPath} HEAD:${params.BRANCH}"
                        }
                    } else {
                        echo "No files modified, skipping commit and push."
                    }
                }
            }
        }
    }
    post {
        failure {
            emailext(
                to: 'recipient@example.com',
                from: 'sender@example.com',
                subject: "构建失败: ${currentBuild.fullDisplayName}",
                body: "构建失败，详情请查看 ${env.BUILD_URL}。",
                attachLog: true
            )
        }
        success {
            emailext(
                to: 'recipient@example.com',
                from: 'sender@example.com',
                subject: "构建成功: ${currentBuild.fullDisplayName}",
                body: "构建成功，详情请查看 ${env.BUILD_URL}。",
                attachLog: true
            )
        }
    }
}
